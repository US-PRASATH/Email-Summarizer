{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uspra\\\\OneDrive\\\\Desktop\\\\Projects\\\\Email-Summarizer\\\\frontend\\\\src\\\\components\\\\EmailList.jsx\",\n  _s = $RefreshSig$();\n// src/components/EmailList.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EmailSummary from './EmailSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailList = () => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchEmails = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/emails');\n        if (Array.isArray(response.data)) {\n          // Add isRead property to each email initially set to false\n          const emailsWithReadStatus = response.data.map(email => ({\n            ...email,\n            isRead: false\n          }));\n          setEmails(emailsWithReadStatus);\n        } else {\n          setError('Unexpected response format. Expected an array.');\n        }\n      } catch (err) {\n        console.error(\"Error fetching emails:\", err);\n        setError('Error fetching emails.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmails();\n  }, []);\n\n  // Function to handle marking an email as read\n  const markAsRead = id => {\n    axios.post('http://localhost:5000/mark_as_read/' + id);\n    setEmails(emails.map(email => email.ID === id ? {\n      ...email,\n      isRead: true\n    } : email));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-lg font-semibold\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-lg font-semibold text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"email-list container mx-auto px-4\",\n    children: emails.length > 0 ? emails.map(email => /*#__PURE__*/_jsxDEV(EmailSummary, {\n      email: email,\n      onMarkAsRead: markAsRead\n    }, email.ID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-lg font-semibold\",\n      children: \"No emails found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(EmailList, \"Euylchhn8zQbWsS8EhOkKL+D2kk=\");\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useEffect","useState","axios","EmailSummary","jsxDEV","_jsxDEV","EmailList","_s","emails","setEmails","loading","setLoading","error","setError","fetchEmails","response","get","Array","isArray","data","emailsWithReadStatus","map","email","isRead","err","console","markAsRead","id","post","ID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onMarkAsRead","_c","$RefreshReg$"],"sources":["C:/Users/uspra/OneDrive/Desktop/Projects/Email-Summarizer/frontend/src/components/EmailList.jsx"],"sourcesContent":["// src/components/EmailList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport EmailSummary from './EmailSummary';\r\n\r\nconst EmailList = () => {\r\n    const [emails, setEmails] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchEmails = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/emails');\r\n                if (Array.isArray(response.data)) {\r\n                    // Add isRead property to each email initially set to false\r\n                    const emailsWithReadStatus = response.data.map(email => ({\r\n                        ...email,\r\n                        isRead: false,\r\n                    }));\r\n                    setEmails(emailsWithReadStatus);\r\n                } else {\r\n                    setError('Unexpected response format. Expected an array.');\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error fetching emails:\", err);\r\n                setError('Error fetching emails.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        \r\n        fetchEmails();\r\n    }, []);\r\n\r\n    // Function to handle marking an email as read\r\n    const markAsRead = (id) => {\r\n        axios.post('http://localhost:5000/mark_as_read/'+id)\r\n        setEmails(emails.map(email =>\r\n            email.ID === id ? { ...email, isRead: true } : email\r\n        ));\r\n    };\r\n\r\n    if (loading) {\r\n        return <p className=\"text-center text-lg font-semibold\">Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"text-center text-lg font-semibold text-red-500\">{error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"email-list container mx-auto px-4\">\r\n            {emails.length > 0 ? (\r\n                emails.map((email) => (\r\n                    <EmailSummary key={email.ID} email={email} onMarkAsRead={markAsRead} />\r\n                ))\r\n            ) : (\r\n                <p className=\"text-center text-lg font-semibold\">No emails found.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmailList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}