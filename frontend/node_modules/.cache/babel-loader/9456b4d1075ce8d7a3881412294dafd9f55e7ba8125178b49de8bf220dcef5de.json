{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uspra\\\\OneDrive\\\\Desktop\\\\Projects\\\\Email-Summarizer\\\\frontend\\\\src\\\\components\\\\EmailList.jsx\",\n  _s = $RefreshSig$();\n// src/components/EmailList.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EmailSummary from './EmailSummary';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailList = () => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchEmails = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/emails');\n        console.log(response.data);\n        if (Array.isArray(response.data.emails)) {\n          // Add isRead property to each email initially set to false\n          const emailsWithReadStatus = response.data.emails.map(email => ({\n            ...email,\n            isRead: false\n          }));\n          setEmails(emails.concat(emailsWithReadStatus));\n        } else {\n          setError('Unexpected response format. Expected an array.');\n        }\n      } catch (err) {\n        console.error(\"Error fetching emails:\", err);\n        setError('Error fetching emails.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmails();\n  }, []);\n  const fetchEmails = async () => {\n    console.log(\"next\");\n    try {\n      const response = await axios.get('http://localhost:5000/emails');\n      if (Array.isArray(response.data.emails)) {\n        // Add isRead property to each email initially set to false\n        const emailsWithReadStatus = response.data.emails.map(email => ({\n          ...email,\n          isRead: false\n        }));\n        setEmails(emails.concat(emailsWithReadStatus));\n      } else {\n        setError('Unexpected response format. Expected an array.');\n      }\n    } catch (err) {\n      console.error(\"Error fetching emails:\", err);\n      setError('Error fetching emails.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to handle marking an email as read\n  const markAsRead = id => {\n    axios.post('http://localhost:5000/mark_as_read/' + id);\n    setEmails(emails.map(email => email.ID === id ? {\n      ...email,\n      isRead: true\n    } : email));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-lg font-semibold\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-lg font-semibold text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"email-list container mx-auto px-4\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: emails.length,\n      next: fetchEmails,\n      children: emails.length > 0 ? emails.map(email => /*#__PURE__*/_jsxDEV(EmailSummary, {\n        email: email,\n        onMarkAsRead: markAsRead\n      }, email.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-lg font-semibold\",\n        children: \"No emails found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(EmailList, \"Euylchhn8zQbWsS8EhOkKL+D2kk=\");\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useEffect","useState","axios","EmailSummary","InfiniteScroll","jsxDEV","_jsxDEV","EmailList","_s","emails","setEmails","loading","setLoading","error","setError","fetchEmails","response","get","console","log","data","Array","isArray","emailsWithReadStatus","map","email","isRead","concat","err","markAsRead","id","post","ID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","length","next","onMarkAsRead","_c","$RefreshReg$"],"sources":["C:/Users/uspra/OneDrive/Desktop/Projects/Email-Summarizer/frontend/src/components/EmailList.jsx"],"sourcesContent":["// src/components/EmailList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport EmailSummary from './EmailSummary';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nconst EmailList = () => {\r\n    const [emails, setEmails] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchEmails = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/emails');\r\n                console.log(response.data);\r\n                if (Array.isArray(response.data.emails)) {\r\n                    // Add isRead property to each email initially set to false\r\n                    const emailsWithReadStatus = response.data.emails.map(email => ({\r\n                        ...email,\r\n                        isRead: false,\r\n                    }));\r\n                    setEmails(emails.concat(emailsWithReadStatus));\r\n                } else {\r\n                    setError('Unexpected response format. Expected an array.');\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error fetching emails:\", err);\r\n                setError('Error fetching emails.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        \r\n        fetchEmails();\r\n    }, []);\r\n\r\n    const fetchEmails = async () => {\r\n        console.log(\"next\");\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/emails');\r\n            if (Array.isArray(response.data.emails)) {\r\n                // Add isRead property to each email initially set to false\r\n                const emailsWithReadStatus = response.data.emails.map(email => ({\r\n                    ...email,\r\n                    isRead: false,\r\n                }));\r\n                setEmails(emails.concat(emailsWithReadStatus));\r\n            } else {\r\n                setError('Unexpected response format. Expected an array.');\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching emails:\", err);\r\n            setError('Error fetching emails.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Function to handle marking an email as read\r\n    const markAsRead = (id) => {\r\n        axios.post('http://localhost:5000/mark_as_read/'+id)\r\n        setEmails(emails.map(email =>\r\n            email.ID === id ? { ...email, isRead: true } : email\r\n        ));\r\n    };\r\n\r\n    if (loading) {\r\n        return <p className=\"text-center text-lg font-semibold\">Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"text-center text-lg font-semibold text-red-500\">{error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"email-list container mx-auto px-4\">\r\n            <InfiniteScroll dataLength={emails.length} next={fetchEmails}>\r\n            {emails.length > 0 ? (\r\n                emails.map((email) => (\r\n                    <EmailSummary key={email.ID} email={email} onMarkAsRead={markAsRead} />\r\n                ))\r\n            ) : (\r\n                <p className=\"text-center text-lg font-semibold\">No emails found.</p>\r\n            )}\r\n            </InfiniteScroll>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmailList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}